from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ChatMemberStatus
from config import BOT_TOKEN, CHANNEL_USERNAME, CHANNEL_ID
import asyncio


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def check_membership(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in {
            'member',
            'administrator',
            'creator'
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# async def check_membership(user_id: int) -> bool:
#     try:
#         member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
#         return member.status in {
#             ChatMemberStatus.MEMBER,
#             ChatMemberStatus.ADMINISTRATOR,
#             ChatMemberStatus.OWNER,
#         }
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
#         return False


@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_message(message: Message):
    user_id = message.from_user.id
    is_member = await check_membership(user_id)

    if not is_member:
        try:
            await message.delete()
            invite_link = f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            await message.answer(

                 f"üëã –ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id={user_id}'>–∫–æ—Ç–∏–∫</a>! –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –∫—Ä—É—Ç—ã–º–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º–∏? –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∏—Å–æ–≤–∞—Ç—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ! üòø\n –ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –∏ —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ! üëâ <a href='{invite_link}'>–∫–∞–Ω–∞–ª</a>",
                parse_mode="HTML",
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–µ: {e}")


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
