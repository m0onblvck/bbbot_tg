import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatMemberStatus, ParseMode
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = "/webhook"

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_membership(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in {
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR,
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_message(message: Message):
    user_id = message.from_user.id
    is_member = await check_membership(user_id)

    if not is_member:
        try:
            await message.delete()
            invite_link = f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id={user_id}'>–∫–æ—Ç–∏–∫</a>! –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –∫—Ä—É—Ç—ã–º–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º–∏? –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∏—Å–æ–≤–∞—Ç—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ! üòø\n–ü–æ–¥–ø–∏—à–∏—Å—å üëâ <a href='{invite_link}'>–∫–∞–Ω–∞–ª</a>",
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–µ: {e}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ webhook (–±–µ–∑ bot –∞—Ä–≥—É–º–µ–Ω—Ç–∞!)
async def on_startup(dispatcher: Dispatcher):
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()
    print("Webhook —É–¥–∞–ª—ë–Ω.")

# –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞
async def main():
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp)

    return app

if __name__ == "__main__":
    web.run_app(main(), port=8080)
